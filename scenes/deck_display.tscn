[gd_scene load_steps=2 format=3 uid="uid://dtayf10vdg1gf"]

[sub_resource type="GDScript" id="GDScript_ghpso"]
script/source = "extends Control
class_name DeckDisplay

@onready var deck_count_label: Label = $Panel/VBoxContainer/HBoxContainer/DeckSection/DeckCountLabel
@onready var discard_count_label: Label = $Panel/VBoxContainer/HBoxContainer/DiscardSection/DiscardCountLabel
@onready var exhaust_count_label: Label = $Panel/VBoxContainer/HBoxContainer/ExhaustSection/ExhaustCountLabel
@onready var deck_cards_container: VBoxContainer = $Panel/VBoxContainer/HBoxContainer/DeckSection/DeckScrollContainer/DeckCardsContainer
@onready var discard_cards_container: VBoxContainer = $Panel/VBoxContainer/HBoxContainer/DiscardSection/DiscardScrollContainer/DiscardCardsContainer
@onready var exhaust_cards_container: VBoxContainer = $Panel/VBoxContainer/HBoxContainer/ExhaustSection/ExhaustScrollContainer/ExhaustCardsContainer
@onready var close_button: Button = $Panel/VBoxContainer/CloseButton

var player_data: PlayerData
var card_database: CardDatabase

func _ready():
	player_data = get_node(\"/root/PlayerDatabase\")
	card_database = get_node(\"/root/CardStuff\")
	close_button.pressed.connect(hide)
	
	var panel = $Panel
	var style_box = StyleBoxFlat.new()
	style_box.bg_color = Color(0.1, 0.1, 0.1, 0.95)
	style_box.border_color = Color.GOLD
	style_box.border_width_left = 2
	style_box.border_width_right = 2
	style_box.border_width_top = 2
	style_box.border_width_bottom = 2
	style_box.corner_radius_top_left = 10
	style_box.corner_radius_top_right = 10
	style_box.corner_radius_bottom_right = 10
	style_box.corner_radius_bottom_left = 10
	panel.add_theme_stylebox_override(\"panel\", style_box)
	
	setup_card_containers()
	
	close_button.text = \"Close\"
	close_button.custom_minimum_size = Vector2(100, 40)

func setup_card_containers():
	deck_cards_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	deck_cards_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	discard_cards_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	discard_cards_container.size_flags_vertical = Control.SIZE_EXPAND_FILL
	exhaust_cards_container.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	exhaust_cards_container.size_flags_vertical = Control.SIZE_EXPAND_FILL

func show_deck():
	update_display()
	visible = true

func update_display():
	for child in deck_cards_container.get_children():
		child.queue_free()
	for child in discard_cards_container.get_children():
		child.queue_free()
	for child in exhaust_cards_container.get_children():
		child.queue_free()
	
	print(\"=== DECK DISPLAY DEBUG ===\")
	print(\"Deck: \", player_data.deck)
	print(\"Discard: \", player_data.discard_pile)
	print(\"Exhaust: \", player_data.exhaust_pile)
	print(\"Hand: \", player_data.hand)
	print(\"==========================\")
	
	deck_count_label.text = \"Deck (%d)\" % player_data.deck.size()
	discard_count_label.text = \"Discard (%d)\" % player_data.discard_pile.size()
	exhaust_count_label.text = \"Exhaust (%d)\" % player_data.exhaust_pile.size()
	
	var deck_card_counts = {}
	for card_id in player_data.deck:
		deck_card_counts[card_id] = deck_card_counts.get(card_id, 0) + 1
	for card_id in deck_card_counts:
		var card_data = card_database.get_card(card_id)
		if card_data:
			var card_label = create_card_label(card_data, deck_card_counts[card_id])
			deck_cards_container.add_child(card_label)
	
	var discard_card_counts = {}
	for card_id in player_data.discard_pile:
		discard_card_counts[card_id] = discard_card_counts.get(card_id, 0) + 1
	for card_id in discard_card_counts:
		var card_data = card_database.get_card(card_id)
		if card_data:
			var card_label = create_card_label(card_data, discard_card_counts[card_id])
			discard_cards_container.add_child(card_label)
	
	var exhaust_card_counts = {}
	for card_id in player_data.exhaust_pile:
		exhaust_card_counts[card_id] = exhaust_card_counts.get(card_id, 0) + 1
	for card_id in exhaust_card_counts:
		var card_data = card_database.get_card(card_id)
		if card_data:
			var card_label = create_card_label(card_data, exhaust_card_counts[card_id])
			exhaust_cards_container.add_child(card_label)
	
	deck_cards_container.queue_redraw()
	discard_cards_container.queue_redraw()
	exhaust_cards_container.queue_redraw()

func create_card_label(card_data: CardData, count: int = 1) -> Label:
	var label = Label.new()
	if count > 1:
		label.text = \"%s x%d\" % [card_data.card_name, count]
	else:
		label.text = card_data.card_name
	match card_data.card_id:
		\"attack\", \"blood_fire\":
			label.add_theme_color_override(\"font_color\", Color(1.0, 0.6, 0.6))
		\"abundance\":
			label.add_theme_color_override(\"font_color\", Color(0.6, 1.0, 0.6))
		_:
			label.add_theme_color_override(\"font_color\", Color(0.8, 0.8, 1.0))
	label.add_theme_font_size_override(\"font_size\", 12)
	label.horizontal_alignment = HORIZONTAL_ALIGNMENT_LEFT
	label.vertical_alignment = VERTICAL_ALIGNMENT_CENTER
	label.custom_minimum_size = Vector2(120, 25)
	label.size_flags_horizontal = Control.SIZE_EXPAND_FILL
	label.size_flags_vertical = Control.SIZE_FILL
	return label

func _on_visibility_changed():
	if visible:
		update_display()
"

[node name="DeckDisplay" type="Control"]
layout_mode = 3
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_right = 800.0
offset_bottom = 600.0
grow_horizontal = 2
grow_vertical = 2
script = SubResource("GDScript_ghpso")

[node name="Panel" type="PanelContainer" parent="."]
layout_mode = 0
offset_right = 40.0
offset_bottom = 40.0

[node name="VBoxContainer" type="VBoxContainer" parent="Panel"]
layout_mode = 2

[node name="TitleLabel" type="Label" parent="Panel/VBoxContainer"]
layout_mode = 2
text = "Deck:"

[node name="HBoxContainer" type="HBoxContainer" parent="Panel/VBoxContainer"]
layout_mode = 2

[node name="DeckSection" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="DeckCountLabel" type="Label" parent="Panel/VBoxContainer/HBoxContainer/DeckSection"]
layout_mode = 2

[node name="DeckScrollContainer" type="ScrollContainer" parent="Panel/VBoxContainer/HBoxContainer/DeckSection"]
layout_mode = 2

[node name="DeckCardsContainer" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer/DeckSection/DeckScrollContainer"]
layout_mode = 2

[node name="DiscardSection" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="DiscardCountLabel" type="Label" parent="Panel/VBoxContainer/HBoxContainer/DiscardSection"]
layout_mode = 2

[node name="DiscardScrollContainer" type="ScrollContainer" parent="Panel/VBoxContainer/HBoxContainer/DiscardSection"]
layout_mode = 2

[node name="DiscardCardsContainer" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer/DiscardSection/DiscardScrollContainer"]
layout_mode = 2

[node name="ExhaustSection" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer"]
layout_mode = 2

[node name="ExhaustCountLabel" type="Label" parent="Panel/VBoxContainer/HBoxContainer/ExhaustSection"]
layout_mode = 2

[node name="ExhaustScrollContainer" type="ScrollContainer" parent="Panel/VBoxContainer/HBoxContainer/ExhaustSection"]
layout_mode = 2

[node name="ExhaustCardsContainer" type="VBoxContainer" parent="Panel/VBoxContainer/HBoxContainer/ExhaustSection/ExhaustScrollContainer"]
layout_mode = 2

[node name="CloseButton" type="Button" parent="Panel/VBoxContainer"]
layout_mode = 2
